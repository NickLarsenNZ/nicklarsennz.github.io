[
{
	"uri": "https://nicklarsennz.github.io/posts/antlr/02-implementing-the-parser/",
	"title": "2. Implementing the Parser",
	"tags": ["antlr", "kotlin", "parser", "code", "tdd"],
	"categories": [],
	"series": ["Writing a Parser for a Small Language"],
	"description": "",
	"content": "Now that we have the gernerated code, and have verified the parse tree, we can now move on to writing code to interpret out StupidLang script.\nThere are two ways to implement the parser from the generated code:\n The Listener Pattern: Optionally override listeners for each rule, and as the parser parses the token stream, the applicable Listener will be called. The Visitor Pattern: Optionally override the Base Visitor for each rule, and starting with the first rule, control which branch of the tre to visit next.  I'll be implementing the Visitor pattern as I'll need control over when to visit children nodes later on when we implement branching (if/else). If you were writing a code translation tool, you might prefer the Listener pattern and let ANTLR call then listeners.\nBecause the Visitor pattern gives you complete control over the parse tree, you must override methods for all rules up to the root. You cannot simply override methods you are interested in.  I'll be taking a test-driven-development approach so that I can writes tests for each unit without having to worry about implementing the the parser from the file entry point down to each leaf. This allows me to implement something simple like print then climibing my way to parsing a whole file.\nSetup I'll quickly explain my setup, because it took a little while to figure out.\nFirstly, my directory structure is as follows:\n1 2 3 4 5 6 7 8 9 10  ├── src/ │ ├── main/ │ │ ├── antlr/ # ANTLR g4 files │ │ ├── gen/ │ │ | └── antlr/ # Generated ANTLR package (Java) │ │ └── kotlin/ # My implementation of the parser, extending the generated code │ └── test/ │ └── kotlin/ # Unit Tests ├── build.gradle └── ...   Secondly, I had to add a task to build.gradle to generate the ANTLR code for whenever I changed the grammar (g4) files.\nThirdly, I had to add the generated sources directory to the Java main source set, and configure my IDE to be aware of the generated source.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // ... lines removed for brevity  // A task to regenerate the code from the grammar // Note: I had trouble when using a package name other than \u0026#34;antlr\u0026#34; generateGrammarSource { maxHeapSize = \u0026#34;64m\u0026#34; arguments += [ \u0026#34;-visitor\u0026#34;, \u0026#34;-no-listener\u0026#34;, \u0026#34;-long-messages\u0026#34;, \u0026#34;-package\u0026#34;, \u0026#34;antlr\u0026#34; ] outputDirectory = new File(\u0026#34;src/main/gen/antlr\u0026#34;.toString()) } // Required for compilation def generatedSourcesDir = file(\u0026#39;src/main/gen\u0026#39;) sourceSets.main.java.srcDir file(generatedSourcesDir) idea { module { // Required for the IDE  generatedSourceDirs += file(generatedSourcesDir) sourceDirs += file(generatedSourcesDir) } }   Helper functions I wrote some helper functions in my implementation to make it easier visit specific parts of the tree. This makes testing a lot simpler.\nSampleParser.kt\n Todo: refactor this into another file\n 1 2 3 4 5 6 7 8 9  fun getParser(code: String): StupidLangParser { val lexer = StupidLangLexer(CharStreams.fromString(code)) return StupidLangParser(CommonTokenStream(lexer)) } fun visit(context: ParserRuleContext): String { return StupidVisitor().visit(context) }   So now I can simply load a snippet of code and retrieve a parser instance, and pick a context to visit from the parser.\nEmpty implementation of the parser The first step to implementing the Visitor is to create a class that extends the generated BaseVisitor.\nStupidVisitor.kt\n Todo: rename to StupidLangImplementation.kt or something\n 1  class StupidVisitor : StupidLangParserBaseVisitor\u0026lt;String\u0026gt;()   This is the class we'll be overriding methods on for parser rules we are insterested in.\nImplement the print statement I figured the print statement was the easiest to start with, as I can simply check that what I want to print results in just that.\nI wrote two tests, one to test a normal usage of print, and another to ensure it still works even with an empty string.\nNote the newline on the expected result - the implementation of print will always end with a newline.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class LanguageTests { @Test fun `print statement`() { val statement = \u0026#34;\u0026#34;\u0026#34;  print \u0026#34;hello world\u0026#34;; \u0026#34;\u0026#34;\u0026#34;.trimIndent()  val parser = getParser(statement) val result = visit(parser.print()) assertEquals(\u0026#34;hello world\\n\u0026#34;, result) } @Test fun `print nothing`() { val statement = \u0026#34;\u0026#34;\u0026#34;  print \u0026#34;\u0026#34;; \u0026#34;\u0026#34;\u0026#34;.trimIndent()  val parser = getParser(statement) val result = visit(parser.print()) assertEquals(\u0026#34;\\n\u0026#34;, result) } }   The test of course fails because we haven't overriden any of the methods. Let's start by overriding the visirPrint method.\nWhen visitPrint is called, we want to visit one of the children - specifically the \u0026ldquo;string\u0026rdquo; rule, as that contains the string we want to print. This means we also need to override visitString to return the contents of the string.\n1 2 3 4 5 6 7 8  class StupidVisitor : StupidLangParserBaseVisitor\u0026lt;String\u0026gt;() { override fun visitPrint(ctx: StupidLangParser.PrintContext?): String { val arg = visit(ctx?.string()) return \u0026#34;$arg\\n\u0026#34; } override fun visitString(ctx: StupidLangParser.StringContext?) = ctx!!.text }   Now we run the test, and indeed it passes.\n Todo: note on nullabiliy and ctx!!\n Implement the repeat Statement The repeat test is quite similar to print.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  @Test fun `repeat statement`() { val statement = \u0026#34;\u0026#34;\u0026#34;  repeat 2 { print \u0026#34;double\u0026#34;; }; \u0026#34;\u0026#34;\u0026#34;.trimIndent()  val parser = getParser(statement) val result = visit(parser.repeat()) assertEquals(\u0026#34;double\\ndouble\\n\u0026#34;, result) } @Test fun `empty repeat`() { val statement = \u0026#34;\u0026#34;\u0026#34; repeat 5 {}; \u0026#34;\u0026#34;\u0026#34;.trimIndent() val parser = getParser(statement) val result = visit(parser.repeat()) assertEquals(\u0026#34;\u0026#34;, result) }   However, the implementation is somewhat different. First we need to check how many times to repeat the statements in the block, then we need to repeat the statements that many times - unless the block is empty, in which case, do nothing (return an empty string).\n1 2 3 4 5 6 7 8 9  override fun visitRepeat(ctx: StupidLangParser.RepeatContext?): String { val times = Integer.valueOf(visit(ctx?.times())) return when { ctx?.statements() == null -\u0026gt; \u0026#34;\u0026#34; else -\u0026gt; visit(ctx.statements()).repeat(times) } } override fun visitTimes(ctx: StupidLangParser.TimesContext?) = ctx!!.text   Handle multiple statements As we work our way up to be able to parse a whole file, we need to be able to handle multiple statements. For the test case, I just check we can run print twice.\n1 2 3 4 5 6 7 8 9 10 11 12  @Test fun `multiple statements`() { val statement = \u0026#34;\u0026#34;\u0026#34;  print \u0026#34;hello world\u0026#34;; print \u0026#34;goofy goober\u0026#34;; \u0026#34;\u0026#34;\u0026#34;.trimIndent()  val parser = getParser(statement) val result = visit(parser.statements()) assertEquals(\u0026#34;hello world\\ngoofy goober\\n\u0026#34;, result) }   The implemention is pretty simple, we just need to join the output of each of the statements. The output of each statement comes form visiting the first child (there is only one child).\n1 2 3 4 5 6 7 8 9  override fun visitStatements(ctx: StupidLangParser.StatementsContext?): String { return ctx ?.statement() ?.map { visit(it) } ?.joinToString(separator = \u0026#34;\u0026#34;) { it } .toString() } override fun visitStatement(ctx: StupidLangParser.StatementContext?) = visit(ctx!!.children.first())   Handle a whole file of statements Handling the whole file is basically the same as handling a bunch of statements, we just call the FileContext context.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  @Test fun `whole file`() { val stupidScript = \u0026#34;\u0026#34;\u0026#34;  repeat 5 { print \u0026#34;hello world\u0026#34;; }; repeat 3 { print \u0026#34;hi\u0026#34;; }; print \u0026#34;the end\u0026#34;; \u0026#34;\u0026#34;\u0026#34;.trimIndent() val expected = \u0026#34;\u0026#34;\u0026#34; hello world hello world hello world hello world hello world hi hi hi the end \u0026#34;\u0026#34;\u0026#34;.trimIndent()  val parser = getParser(stupidScript) val result = visit(parser.file()) assertEquals(expected, result) } @Test fun `empty file`() { val stupidScript = \u0026#34;\u0026#34; val expected = \u0026#34;\u0026#34; val parser = getParser(stupidScript) val result = visit(parser.file()) assertEquals(expected, result) }   We just need to allow for the case of an empty file (no statements), which will yeild an empty string. Otherwise, visit each statement.\n1 2 3 4 5 6  override fun visitFile(ctx: StupidLangParser.FileContext?): String { return when { ctx?.statements() == null -\u0026gt; \u0026#34;\u0026#34; else -\u0026gt; visit(ctx.statements()) } }   Conclusion ANTLR makes it easy to test each portion of the parser by allowing us to provide a string to parse, and choose which context to begin visiting from. This will become invaluable as the language grows, becuase any regression will quickly become apparent.\nThe next post in the series will show how to extend the language. We'll add new rules to the parser grammar, and write the accompanying code.\n"
},
{
	"uri": "https://nicklarsennz.github.io/tags/antlr/",
	"title": "antlr",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/tags/code/",
	"title": "code",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/tags/kotlin/",
	"title": "kotlin",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/",
	"title": "NickLarsenNZ",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/tags/parser/",
	"title": "parser",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/posts/",
	"title": "Posts",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/tags/tdd/",
	"title": "tdd",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/series/writing-a-parser-for-a-small-language/",
	"title": "Writing a Parser for a Small Language",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/posts/antlr/01-writing-a-parser-for-a-small-language/",
	"title": "1. Simple grammar to define loop semantics",
	"tags": ["antlr", "kotlin", "parser", "grammar"],
	"categories": [],
	"series": ["Writing a Parser for a Small Language"],
	"description": "",
	"content": "For a long time I've been facinated by parsers and in particularly ANTLR (the parser generator).\nANTLR is a parser generator which makes it simple to define a grammar made of tokens (lexer rules) and a parser rules, and then generate code to parse the defined grammar.\nThere are plenty of other articles explaining parsers, and in particular ANTLR, but I wanted to skip that and move straight into defining my own interpreted language leveraging the code generated by ANTLR.\n TODO: Listener vs Visitor pattern\n Series  Simple grammar to define loop semantics Implementing the parser (in Kotlin) Add variable assignment and interpolation Add branching (if/else)  StupidLang \u0026hellip; is the name of my stupid language. It's not made to be a useful language, but rather a means to learning about ANTLR and the Visitor pattern.\nFor starters, I wanted to be able to implement a loop.\nrepeat 5 { print \u0026quot;hello world\u0026quot;; }; Lexer Rules Lexer rules make the parser grammar a lot easier to define, and improves on the utility of the generated code (you'll end up with objects representing the tokens rather than having to dig out and check strings). More on that later.\nLooking at the example above, I see a number of tokens. In ANTLR grammar (g4) files, tokens must start with a capital letter (ideally complete caps) to differentiate from parser rules which begin with a lower case.\nDecisions:\n Keywords will be tokenized. I want the script to be parsable without whitespace (this makes the parser rules easy to write because we are only concerned with a stream of meaningful tokens)  StupidLangLexer.g4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // Specify that this are the lexer ruleslexergrammarStupidLangLexer;// statement keywordsREPEAT:\u0026#39;repeat\u0026#39;;PRINT:\u0026#39;print\u0026#39;;// TypesNUMBER:[0-9]+;// Special charactersLBRACE:\u0026#39;{\u0026#39;;RBRACE:\u0026#39;}\u0026#39;;SEMICOLON:\u0026#39;;\u0026#39;;DQUOTE:\u0026#39;\u0026#34;\u0026#39;;// Send all whitespace to a hidden channelWS:[\\r\\n\\t ]+-\u0026gt;channel(HIDDEN);  The above seems pretty straight forward. Let's now write some parsing rules.\nParser Rules Parser rules define the actual structure of the langauge, and use tokens from the lexer rules to both the writing and reading of the grammar.\nDecisions:\n Each script file will be interpreted alone and in isolation for now. An empty file is valid.  Using the loop example above, it seems like we start of with a file, which contains zero or more statements.\nWe support two statements so far:\n repeat with two parameters (a number, and a block or closure) print with a string parameter, and a semicolon to indicate the end of the statement.  Note: Typically code blocks (indicated by { and }) do not need a semicolon ; as their end is unambiguous, but the parser rules become a bit more complex so I have made it mandatory. I could infer stataments end with a newline, but remeber, we are hiding whitespace. There are tradeoffs.\nI like to put the entry point rule at the start to make it obvious. In this case file.\nStupidLangParser.g4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  // Specify that this are the parser rulesparsergrammarStupidLangParser;// Refer to the lexer rulesoptions{tokenVocab=StupidLangLexer;}// The file contains (or doesn\u0026#39;t contain) statements// EOF is a special token when then end of the token stream is reached.file:statements?EOF;// Statements are one or more statement followed by a terminatorstatements:(statementSEMICOLON)+;// We permit a number of statementsstatement:repeat|print;// Repeat takes two parameters, a number and a code blockrepeat:REPEATtimesLBRACEstatements?RBRACE;// Just a shortcut rule to make sense of the grammar.times:NUMBER;// Print non greedily takes everything between two double quotes// Do you spot the problem?print:PRINTDQUOTE.*?DQUOTE;  Our first problem: Missing whitespaces In trying to make the grammar simple to define, we told the lexer to ignore whitespaces\u0026hellip; but what happens when we want to do print \u0026quot;hello world\u0026quot;? The parser would see the stream of charaters between the DQUOTE tokens as helloworld.\nSo we mostly want to hide whitespaces, but not always\u0026hellip; Hmm, I wish we could jump into a different mode for when we need to parse strings, and not hide whitespaces.\nModes Modes allow us to jump into a different parsing context, for when we need to sometimes apply different lexer rules. This is perfect. We want to remove whitespace in general, except for when we know we are parsing a string (indicated by the DQUOTE token).s\nIn ANTLR, modes are pushed onto, and popped off a stack as the parser takes in the stream of tokens.\nSo, let's revise our lexer grammar:\nStupidLangLexer.g4\n1 2 3 4 5 6 7 8 9 10  // Special characters// ...DQUOTE:\u0026#39;\u0026#34;\u0026#39;-\u0026gt;pushMode(STRING_MODE);// Send all whitespace to a hidden channelWS:[\\r\\n\\t ]+-\u0026gt;channel(HIDDEN);modeSTRING_MODE;S_DQUOTE:\u0026#39;\u0026#34;\u0026#39;-\u0026gt;type(DQUOTE),popMode;CHARACTER:.;  Important: The rule for sending whitespace to a hidden channel must appear before any modes are defined, but after all rules that pushMode into a mode that should have spaces preserved.\nNote: The rule names within each mode must be unique, hence the prefixing. Also notice that as we use type(DQUOTE) to equate the redefined double-quote with the already defined DQUOTE. _Todo: find out exactly what this does, I assume it is so you can simply use the main token inside the parser rules.\nThe stack nature of modes gives us a lot of power. For example, we could allow escaped charaters: print \u0026quot;double quote: \\\u0026quot;\u0026quot;. We could just define some extra lexer rules to take us into a literal parsing mode whenever we see a \\ from string processing mode.\nStupidLangLexer.g4\n1 2 3 4 5 6 7 8  modeSTRING_MODE;S_ESCAPE:\u0026#39;\\\u0026#39; -\u0026gt; pushMode(LITERAL_MODE); S_DQUOTE : \u0026#39;\u0026#34;\u0026#39;-\u0026gt;type(DQUOTE),popMode;CHARACTER:.;modeLITERAL_MODE;LITERAL:.-\u0026gt;popMode;  You could extend this to be able to do things like string interpolation of variables.\nNow we can adjust the parser rule:\nStupidLangParser.g4\n1 2 3 4 5 6 7 8 9 10 11  // ...print:PRINTDQUOTEstringDQUOTE;// Shortcut so we have a named property in the generated codestring:.*?;  Verify Generate and compile the code\n1 2 3  antlr4 StupidLangLexer.g4 antlr4 StupidLangParser.g4 javac StupidLang*.java   Make a file with the stupid script:\n1 2 3 4 5 6 7 8 9 10 11  cat \u0026gt;\u0026gt; /tmp/loop.stupid \u0026lt;\u0026lt;EOF repeat 5 { print \u0026#34;hello world\u0026#34;; }; repeat 3 { print \u0026#34;hi\u0026#34;; }; print \u0026#34;the end\u0026#34;; EOF   Run it against ANTLR's parse tree viewer:\n1  grun StupidLang file -gui \u0026lt; /tmp/loop.stupid    "
},
{
	"uri": "https://nicklarsennz.github.io/tags/grammar/",
	"title": "grammar",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nicklarsennz.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
}]